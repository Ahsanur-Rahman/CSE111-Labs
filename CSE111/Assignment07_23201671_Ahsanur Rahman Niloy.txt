//task3
public class Parcel {
    String name;
    int weight;
    double fee;
    Parcel(){

    };
    Parcel(String name){
        this.name=name;
    }
    Parcel(String name,int weight){
        this.weight=weight;
        this.name=name;
    }
    void printDetails(){
        if(this.name==null){
            System.out.println("Set name first");
        }
        else{
            System.out.println("Name: "+this.name);
            System.out.println("Total Weight: "+this.weight);
            System.out.println("Total Fee: "+this.fee);

        }
    }
    void calcFee(String location){
        if(this.weight==0){
            this.fee=0;
        }
        if(location=="Dhanmondi"){
            this.fee=50+(weight*20);
        }
        else {
            this.fee=(weight*20);
        }
    }

    void addWeight(int weight){
        this.weight+=weight;
        System.out.println("Updated Weight: "+this.weight);
    }
}


//task4
public class Shape2D {
    private String shapeType;
    private double length;
    private double breadth;
    private double height;
    private double side1, side2, side3;

    public Shape2D(double length) {
        this.shapeType = "Square";
        this.length = length;
        System.out.println("A Square has been created with length: " + length);
    }

    public Shape2D(double length, double breadth) {
        this.shapeType = "Rectangle";
        this.length = length;
        this.breadth = breadth;
        System.out.println("A Rectangle has been created with length: " + length + " and breadth: " + breadth);
    }

    public Shape2D(double height, double base, String shapeType) {
        if (shapeType.equalsIgnoreCase("Triangle")) {
            this.shapeType = "Triangle";
            this.height = height;
            this.breadth = base; // base is treated as breadth here
            System.out.println("A Triangle has been created with height: " + height + " and base: " + base);
        }
    }

    public Shape2D(double side1, double side2, double side3) {
        this.shapeType = "Triangle";
        this.side1 = side1;
        this.side2 = side2;
        this.side3 = side3;
        System.out.println("A Triangle has been created with the following sides: " + side1 + ", " + side2 + ", " + side3);
    }

    public void area() {
        double area = 0;
        switch (this.shapeType) {
            case "Square":
                area = length * length;
                System.out.println("The area of the Square is: " + area);
                break;
            case "Rectangle":
                area = length * breadth;
                System.out.println("The area of the Rectangle is: " + area);
                break;
            case "Triangle":
                if (side1 == 0 && side2 == 0 && side3 == 0) {
                    area = 0.5 * breadth * height;
                    System.out.println("The area of the Triangle is: " + area);
                } else {
                    double s = (side1 + side2 + side3) / 2;
                    area = Math.sqrt(s * (s - side1) * (s - side2) * (s - side3));
                    System.out.println("The area of the Triangle is: " + String.format("%.2f", area));
                }
                break;
            default:
                System.out.println("Unknown shape");
                break;
        }
    }
}


//task5
public class Book {
    private String title;
    private String author;
    private int price;

    public Book(String title) {
        this.title =title;
    }

    public Book(String title, String author) {
        this.title=title;
        this.author=author;
    }

    public Book(String title, String author, int price) {
        this.title=title;
        this.author=author;
        this.price=price;
    }

    public void displayDetails() {
        if (author==null && price == 0) {
            System.out.println("Title: " +title);
        } else if (price == 0) {
            System.out.println("Title: " +title+ ", Author: " +author);
        } else if (author == null) {
            System.out.println("Title: " +title+ ", Price: " +price);
        } else {
            System.out.println("Title: " +title+ ", Author: " +author + ", Price: " +price);
        }
    }

    public void setDetails(int price) {
        this.price =price;
    }

    public void setDetails(String author, int price) {
        this.author =author;
        this.price =price;
    }
}

//task6
public class Product {
    private String name;
    private double price;
    private int quantity;
    
    public Product() {
        this.name="Unknown";
        this.price=0.0;
    }

    
    
    
    public Product(String name, double price) {
        this.name=name;
        this.price=price;
    }


    
    public double getPrice() {
        return price;
    }
    
    
    public void setPrice(double price) {
        this.price=price;
    }
    
    public int getQuantity() {
        return quantity;
    }


    public void setQuantity(int quantity) {
        this.quantity=quantity;
    }


    public void displayInfo() {
        System.out.println("Product Name: "+name);
        System.out.println("Price: $"+price);
    }
    
    public void displayInfo(boolean showQuantity) {
        displayInfo();
        if (showQuantity) {
            System.out.println("Quantity: "+quantity);
        }
    }
}


//task7

public class Student {

    private int id;
    private double cgpa;
    private String[] courses;
    private int courseCount;
    private static final int MAX_COURSES=4;

    // Constructor with only ID
    public Student(int id) {
        this.id=id;
        this.cgpa=-1; // CGPA not set
        this.courses=new String[MAX_COURSES];
        this.courseCount=0;
    }

    public Student(int id, double cgpa) {
        this(id);
        this.cgpa=cgpa;
    }

    public void setCG(double cgpa) {
        this.cgpa=cgpa;
    }

    public void setID(int id) {
        this.id=id;
    }

    public void addCourse(String course) {
        if (cgpa == -1) {
            System.out.println("Failed to add " + course);
            System.out.println("Set CG first");
            return;
        }
        if (cgpa<3.0 && courseCount >= 3) {
            System.out.println("Failed to add " + course);
            System.out.println("CG is low. Can't add more than 3 courses.");
            return;
        }
        if (courseCount>= MAX_COURSES) {
            System.out.println("Failed to add " + course);
            System.out.println("Maximum 4 courses allowed.");
            return;
        }
        courses[courseCount++]=course;
    }

    public void addCourse(String[] newCourses) {
        for (String course : newCourses) {
            addCourse(course);
        }
    }

    public void rmAllCourse() {
        courses = new String[MAX_COURSES]; // Reinitialize array
        courseCount = 0; // Reset course count
    }

    public void showAdvisee() {
        System.out.print("Student ID: " + id + ", CGPA: " + cgpa + "\n");
        if (courseCount == 0) {
            System.out.println("No courses added.");
        } else {
            System.out.print("Added courses are:\n");
            for (int i = 0; i < courseCount; i++) {
                System.out.print(courses[i] + " ");
            }
            System.out.println();
        }
    }

    public double getCG() {
        return this.cgpa;
    }

    public int getQuantity() {
        return courseCount;
    }
}


//task8 


public class ABCServer {
    private String serverName;
    private int memberCapacity;
    private int totalMembers;
    private String[][] members; // Array to store member names and roles


    public ABCServer() {
        this.serverName="Default";
        this.memberCapacity=10;
        this.totalMembers=0;
        this.members=new String[memberCapacity][2]; // 2 columns: name and role
    }


    public ABCServer(String serverName, int memberCapacity) {
        this.serverName=serverName;
        this.memberCapacity=memberCapacity;
        this.totalMembers=0;
        this.members=new String[memberCapacity][2];
    }
    
    public void addMembers(String name) {
        addMembers(name, "Rising Hero");
    }
    
    public void addMembers(String name, String role) {
        if (totalMembers < memberCapacity) {
            members[totalMembers][0]=name;
            members[totalMembers][1]=role;
            totalMembers++;
            System.out.println(role + " is added.");
        } else {
            System.out.println("Sorry, maximum capacity exceeded!");
        }
    }
    
    public void details() {
        System.out.println("Server Name: "+serverName);
        System.out.println("Member Capacity: "+memberCapacity);
        System.out.println("Total Members: "+totalMembers);
        System.out.print("Members:\n");
        if (totalMembers == 0) {
            System.out.println();
        } else {
            for (int i=0;i < totalMembers;i++) {
                System.out.println("Name:Role --> "+members[i][0]+":"+members[i][1]);
            }
        }
    }
}

